{"version":3,"sources":["components/EmpCard/index.js","components/Title/index.js","components/Wrapper/index.js","components/Form/index.js","components/TabMenu/index.js","App.js","serviceWorker.js","index.js"],"names":["EmpCard","props","className","alt","name","src","image","job","home","network","onClick","handleDelete","Title","children","Wrapper","Form","aria-describedby","onChange","handleInputChange","type","placeholder","TabMenu","Tabs","defaultActiveKey","onSelect","k","handleFilterNetwork","Tab","eventKey","title","networks","map","i","key","App","state","search","Cartoons","results","forEach","entry","includes","push","id","remainCartoons","filter","emp","console","log","setState","e","target","value","handleFilterName","data","toLowerCase","this","Container","CardColumns","toon","occupation","location","React","Component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c83ca161.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction EmpCard(props) {\n  // console.log(props)\n  return (\n    <div className=\"card\">\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.image} />\n      </div>\n      <div className=\"content\">\n        <ul>\n          <li>\n            <strong>Name:</strong> {props.name}\n          </li>\n          <li>\n            <strong>Occupation:</strong> {props.job}\n          </li>\n          <li>\n            <strong>Location:</strong> {props.home}\n          </li>\n          <li>\n            <strong>Network:</strong> {props.network}\n          </li>\n        </ul>\n      </div>\n      <span className=\"remove\" onClick={props.handleDelete}>\n        ùòÖ\n      </span>\n    </div>\n  );\n}\n\nexport default EmpCard;\n\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nexport default Title;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React, { Component } from \"react\";\nimport \"./style.css\";\n\nfunction Form(props) {\n  return (\n    <div>\n        <form className=\"form\">\n          <div className=\"input-group input-group-sm\">\n            <input\n              className=\"form-control\"\n              aria-describedby=\"basic-addon1\"\n              name=\"search\"\n              onChange={props.handleInputChange}\n              type=\"text\"\n              placeholder=\"Search by name\"\n            />\n          </div>\n          \n        </form>\n      </div>\n  )\n}\n\n\nexport default Form;\n","import React from \"react\";\nimport \"./style.css\";\nimport { Tabs, Tab } from \"react-bootstrap\";\n\nfunction TabMenu(props) {\n  return (\n    <Tabs defaultActiveKey=\"All\" onSelect={(k) => {\n      props.handleFilterNetwork(k)\n    }}>\n      <Tab eventKey=\"All\" title=\"All\"></Tab>\n      {props.networks.map((network, i) => (\n        <Tab \n          eventKey={network} \n          title={network} \n          key={i}\n        />\n      ))}\n    </Tabs>\n  );\n}\n\nexport default TabMenu;\n","import React from \"react\";\nimport \"./App.css\";\nimport EmpCard from \"./components/EmpCard\";\nimport Title from \"./components/Title\";\nimport Wrapper from \"./components/Wrapper\";\nimport Form from \"./components/Form\";\nimport TabMenu from \"./components/TabMenu\";\nimport Cartoons from \"./Cartoons.json\";\nimport CardColumns from \"react-bootstrap/CardColumns\";\nimport { Container } from \"react-bootstrap\";\n\n// determine number of tabs/networks\n\nclass App extends React.Component {\n  state = {\n    search: \"\",\n    Cartoons,\n    results: [],\n    networks: (function () {\n      let networks = [];\n      Cartoons.forEach((entry) => {\n        if (!networks.includes(entry.network)) {\n          networks.push(entry.network);\n        }\n      });\n      return networks;\n    })(),\n  };\n\n  // When this component mounts, search the Giphy API for pictures of kittens\n  componentDidMount() {\n    console.log(\"mounted\");\n    console.log(this.state);\n    this.setState({ results: Cartoons });\n  }\n\n  handleDelete = (id) => {\n    const remainCartoons = this.state.Cartoons.filter((emp) => emp.id !== id);\n    console.log(remainCartoons);\n    this.setState({ Cartoons: remainCartoons, results: remainCartoons }, () => {\n      console.log(this.state);\n    });\n  };\n\n  handleInputChange = (e) => {\n    // Getting the value and name of the input which triggered the change\n    const { name, value } = e.target;\n    console.log(name);\n    console.log(value);\n    console.log(e.target);\n\n    // Updating the input's state\n    // * match up name attribute to state property\n    this.setState(\n      {\n        [name]: value,\n      },\n      this.handleFilterName // pass function without calling\n    );\n  };\n\n  handleFilterName = () => {\n    let data = [];\n    this.state.Cartoons.forEach((entry) => {\n      if (entry.name.toLowerCase().includes(this.state.search.toLowerCase())) {\n        data.push(entry);\n      }\n    });\n    this.setState({ results: data });\n  };\n\n  handleFilterNetwork = (k) => {\n    this.setState({ results: Cartoons }, () => {\n      if(k !== \"All\") {\n        this.setState({\n          results: this.state.results.filter((entry) => entry.network === k),\n        });\n      }\n    });\n  };\n\n  render() {\n    return (\n      <>\n        <Title>Cartoons</Title>\n        <TabMenu\n          networks={this.state.networks}\n          handleFilterNetwork={this.handleFilterNetwork}\n        />\n        <Wrapper>\n          <Form\n            search={this.state.search}\n            handleInputChange={this.handleInputChange}\n          />\n        </Wrapper>\n\n        <Container>\n          <CardColumns>\n            {this.state.results.map((toon) => (\n              <EmpCard\n                name={toon.name}\n                image={toon.image}\n                job={toon.occupation}\n                home={toon.location}\n                network={toon.network}\n                key={toon.id}\n                handleDelete={() => this.handleDelete(toon.id)}\n              />\n            ))}\n          </CardColumns>\n        </Container>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["components/EmpCard/index.js","components/Title/index.js","components/Wrapper/index.js","components/Form/index.js","components/TabMenu/index.js","App.js","serviceWorker.js","index.js"],"names":["EmpCard","props","className","alt","name","src","image","job","home","network","onClick","handleDelete","Title","children","Wrapper","Form","aria-describedby","onChange","handleInputChange","type","placeholder","TabMenu","Tabs","defaultActiveKey","onSelect","k","handleFilterNetwork","Tab","eventKey","title","networks","map","i","key","App","state","search","Cartoons","results","forEach","entry","includes","push","id","remainCartoons","filter","emp","console","log","setState","e","target","value","handleFilterName","data","toLowerCase","document","this","Container","CardColumns","toon","occupation","location","React","Component","Boolean","window","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3cecfd76.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction EmpCard(props) {\r\n  // console.log(props)\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"img-container\">\r\n        <img alt={props.name} src={props.image} />\r\n      </div>\r\n      <div className=\"content\">\r\n        <ul>\r\n          <li>\r\n            <strong>Name:</strong> {props.name}\r\n          </li>\r\n          <li>\r\n            <strong>Occupation:</strong> {props.job}\r\n          </li>\r\n          <li>\r\n            <strong>Location:</strong> {props.home}\r\n          </li>\r\n          <li>\r\n            <strong>Network:</strong> {props.network}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <span className=\"remove\" onClick={props.handleDelete}>\r\n        ùòÖ\r\n      </span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EmpCard;\r\n\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Title(props) {\r\n  return <h1 className=\"title\">{props.children}</h1>;\r\n}\r\n\r\nexport default Title;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React, { Component } from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Form(props) {\r\n  return (\r\n    <div>\r\n        <form className=\"form\">\r\n          <div className=\"input-group input-group-sm\">\r\n            <input\r\n              className=\"form-control\"\r\n              aria-describedby=\"basic-addon1\"\r\n              name=\"search\"\r\n              onChange={props.handleInputChange}\r\n              type=\"text\"\r\n              placeholder=\"Search by name\"\r\n            />\r\n          </div>\r\n          \r\n        </form>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\nimport { Tabs, Tab } from \"react-bootstrap\";\r\n\r\nfunction TabMenu(props) {\r\n  return (\r\n    <Tabs defaultActiveKey=\"All\" onSelect={(k) => {\r\n      props.handleFilterNetwork(k)\r\n    }}>\r\n      <Tab eventKey=\"All\" title=\"All\"></Tab>\r\n      {props.networks.map((network, i) => (\r\n        <Tab \r\n          eventKey={network} \r\n          title={network} \r\n          key={i}\r\n        />\r\n      ))}\r\n    </Tabs>\r\n  );\r\n}\r\n\r\nexport default TabMenu;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport EmpCard from \"./components/EmpCard\";\r\nimport Title from \"./components/Title\";\r\nimport Wrapper from \"./components/Wrapper\";\r\nimport Form from \"./components/Form\";\r\nimport TabMenu from \"./components/TabMenu\";\r\nimport Cartoons from \"./Cartoons.json\";\r\nimport CardColumns from \"react-bootstrap/CardColumns\";\r\nimport { Container } from \"react-bootstrap\";\r\n\r\n// determine number of tabs/networks\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    search: \"\",\r\n    Cartoons,\r\n    results: [],\r\n    networks: (function () {\r\n      let networks = [];\r\n      Cartoons.forEach((entry) => {\r\n        if (!networks.includes(entry.network)) {\r\n          networks.push(entry.network);\r\n        }\r\n      });\r\n      return networks;\r\n    })(),\r\n  };\r\n\r\n  // When this component mounts\r\n  componentDidMount() {\r\n    console.log(\"mounted\");\r\n    document.title = \"Cartoon Employee Directory\"\r\n    this.setState({ results: Cartoons });\r\n  }\r\n\r\n  handleDelete = (id) => {\r\n    const remainCartoons = this.state.Cartoons.filter((emp) => emp.id !== id);\r\n    console.log(remainCartoons);\r\n    this.setState({ Cartoons: remainCartoons, results: remainCartoons }, () => {\r\n      console.log(this.state);\r\n    });\r\n  };\r\n\r\n  handleInputChange = (e) => {\r\n    // Getting the value and name of the input which triggered the change\r\n    const { name, value } = e.target;\r\n    console.log(name);\r\n    console.log(value);\r\n    console.log(e.target);\r\n\r\n    // Updating the input's state\r\n    // * match up name attribute to state property\r\n    this.setState(\r\n      {\r\n        [name]: value,\r\n      },\r\n      this.handleFilterName // pass function without calling\r\n    );\r\n  };\r\n\r\n  handleFilterName = () => {\r\n    let data = [];\r\n    this.state.Cartoons.forEach((entry) => {\r\n      if (entry.name.toLowerCase().includes(this.state.search.toLowerCase())) {\r\n        data.push(entry);\r\n      }\r\n    });\r\n    this.setState({ results: data });\r\n  };\r\n\r\n  handleFilterNetwork = (k) => {\r\n    this.setState({ results: Cartoons }, () => {\r\n      if(k !== \"All\") {\r\n        this.setState({\r\n          results: this.state.results.filter((entry) => entry.network === k),\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Title>Cartoon Employment Directory</Title>\r\n        <TabMenu\r\n          networks={this.state.networks}\r\n          handleFilterNetwork={this.handleFilterNetwork}\r\n        />\r\n        <Wrapper>\r\n          <Form\r\n            search={this.state.search}\r\n            handleInputChange={this.handleInputChange}\r\n          />\r\n        </Wrapper>\r\n\r\n        <Container>\r\n          <CardColumns>\r\n            {this.state.results.map((toon) => (\r\n              <EmpCard\r\n                name={toon.name}\r\n                image={toon.image}\r\n                job={toon.occupation}\r\n                home={toon.location}\r\n                network={toon.network}\r\n                key={toon.id}\r\n                handleDelete={() => this.handleDelete(toon.id)}\r\n              />\r\n            ))}\r\n          </CardColumns>\r\n        </Container>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}